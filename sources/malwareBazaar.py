import os
import requests
import json
from time import sleep
import pyzipper
from tqdm import tqdm

mb_api_url = "https://mb-api.abuse.ch/api/v1/?"
files_downloaded = set()

def downloadsample(sha256):
    path = "/../samples/MalwareBazaar"
    script_path = str(os.path.dirname(os.path.realpath(__file__)))
    path = script_path + path
    if not os.path.exists(path):
        os.makedirs(path)
    request_data = {
        "query": "get_file",
        "sha256_hash": str(sha256).lower()
    }
    try:
        download_request = requests.post(url=mb_api_url, data=request_data)
    except:
        return
    filepath = path + "/" + str(sha256) + "_pw_infected.zip"
    with open(filepath, "wb") as f:
        f.write(download_request.content)
    try:
        with pyzipper.AESZipFile(filepath, 'r', compression=pyzipper.ZIP_DEFLATED, encryption=pyzipper.WZ_AES) as extracted_zip:
            extracted_zip.extractall("samples/MalwareBazaar/", pwd=str.encode("infected"))
    except: # Failed once
        pass
    # remove zip file as it should not be scanned
    os.remove(filepath)

def feedcheck():
    request_payload = {
        "query": "get_recent",
        "selector": "time"
    }
    try:
        request = requests.post(url=mb_api_url, data=request_payload)
    except:
        data = None
    try:
        data = json.loads(request.text)
    except:
        data = None
    if data is not None:
        hashes = set()
        if "query_status" in data:
            if data["query_status"] == "no_results":
                print("[+] No results from MalwareBazaar; sleeping for an hour")
                for i in tqdm(range(3600)):
                    sleep(1)
                feedcheck()
        try:
            for file in data["data"]:
                filehash = str(file["sha256_hash"])
                hashes.add(filehash)
        except:
            print("[!] malwareBazaar.py - line 61 - data variable is malformed, printing it out")
            print(data)
        for filehash in hashes:
            if filehash not in files_downloaded:
                print(f"[+] Downloading {str(filehash)}")
                downloadsample(filehash)
                files_downloaded.add(filehash)
                sleep(10)

def main():
    feedcheck()

main()